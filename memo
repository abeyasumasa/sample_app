#コントローラーテストする際に使うコマンド
rails test

#Guardにてテストの自動化（ファイルシステムの変更を監視している）
bundle exec guard

#システム上で動いている全てのプロセスの確認方法
ps aux

#プロセスの種類を指定してフィルタ
ps aux |grep spring

#プロセスの削除
kill - 

#mapメソッド
配列の要素分同じ処理を繰り返すときに使用する
https://www.sejuku.net/blog/55745

img_tagヘルパー
alt属性には画像の説明文を記載します。
https://creive.me/archives/13212/

静的ページなどを作成する場合、ヘッダー、フッターなどはlayoutフォルダに保管しておき、
必要な場合、applicationファイルにて呼び出す方がコードが綺麗


#デフォルトのルーティングを変更する方法（名前つきルートを定義すると可能になる）
 GETリクエストが/helpに送信されたときにStaticPagesコントローラーのhelpアクションに飛ばしてくれる
 また、as:オプションを使うとルーティングに名前を設定できます。(helf_path,helf_urlが生成される)
get '/help', to: 'static_pages#help' , as: :helf

#技術的な補足
 params[:id]は文字列型の"1"ですが、findメソッドでは自動的に整列型に変換される
  @user = User.find(params[:id])

 #デバック(byebug)
  アプリケーションのdebuggerが呼び出された瞬間の状態を確認できる(ctrl + D で抜ける)
  debugger

#パーシャルについて
　複数のビューで使われるパーシャルは専用のディレクトリ「shared」に置かれる。

#フォームでAjaxを使う際の注意点
 Ajaxを行うときにform_forやrorm_tagはオプションでremote: trueで対応していたが、
 form_withではデフォルトでremote: trueになっている
 formでAjaxを使用しない時はform_withのオプションでlocal: trueを指定するとvalidationエラーをViewに表示することが可能。

#content_tagの使い方
 railsアプリでHTMLコードを生成する方法です。(1番目の引数:要素名,2番目の引数:要素のコンテンツ,3番目の引数クラス名)
 content_tag(:div,"content", class:"")
 #=> "<div class="">content</div>"

 9章はもう一度やる

 #Railsはどうやって新規ユーザー用のpostリクエストとユーザー編集用のpatchリクエストを区別しているのか
  form_withを使ってフォームを構成すると、@user.new_record?がtrueのときにはPOSTを、falseのときはPATCHを使います。

#provideメソッド
 Viewでprovideヘルパーを利用することで、レイアウト側に値を引き渡すことができます。
 レイアウト側からは、yieldメソッドを利用することで呼び出せる。
 (view/home.html/erb)
 <% provide :title, 'タイトルの例' %>
 (layout/application.html.erb)
 <title><%= yield(:title) || 'Rails入門' %></title>

#ユーザー編集時にパスワードの変更が必要ない場合
 パスワードのバリデーションに対して、空だった時の例外処理を加えれば良い。
 allow_nil: trueというオプションをvalidatesに追加すれば良い。
 また、新規ユーザー登録時にか空のパスワードが有効になってしまうと心配しているが、
 has_secure_passwordでは追加したバリデーションとは別にオブジェクト生成時に存在性を検証するようになっているため、
 空のパスワードが新規ユーザー登録時に有効になることはありません。

#認証と認可の違い
 認証…サイトのユーザーを識別することで
 認可…そのユーザーが実行可能な操作を管理すること

#beforeフィルター
 before_actionメソッドを使って何らかの処理が実行される直前に特定のメソッドを実行する仕組み

#Fakerメソッド
　サンプルユーザーを大量に生成することができる

